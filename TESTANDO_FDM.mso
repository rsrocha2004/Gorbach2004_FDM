#############################################################################	
# TESTANDO 40
# Author: Rodrigo Santos Rocha
# Using Gorbach's data:
# https://doi.org/10.1023/B:ADSO.0000024033.60103.ff
#############################################################################	

using "OCFEM";
using "streams";





FlowSheet TESTANDO

	VARIABLES
	zb_H2O as Real (Brief = "Water Molar Fraction");
	Tp_profile as Real (Brief = "Temperature Profile", Unit = 'K');

	EQUATIONS
	zb_H2O = SIEVE.OCFEM.respzb(SIEVE.ne*SIEVE.np-(SIEVE.ne-1),1);
	Tp_profile = SIEVE.OCFEM.respTp(SIEVE.ne*SIEVE.np-(SIEVE.ne-1));


	#######
	OPTIONS
	#######
	
	TimeStep = 0.1; # TimeStep = 0.01;
	TimeEnd = 25.0; # TimeEnd = 2053;
	TimeUnit = 'h';
	Dynamic = true;
	#GuessFile = "TESTANDO_GORBACH2004_1-7.rlt";

	NLASolver(
		#File = "sundials",
		RelativeAccuracy = 1.0E-05,
		AbsoluteAccuracy = 1.0E-06,
		MaxIterations = 2000
	);
	
	DAESolver(
		File = "dasslc", #dasslc #pside #sundials
		RelativeAccuracy = 1.0E-05,
		AbsoluteAccuracy = 1.0E-06,
		EventAccuracy = 1.0E-02

	);

	# ----------------------------------------------------------------------------------------------------------------------------------------------------------


	
	#######	
	DEVICES
	#######
	
	#FEED as source;
	SIEVE as ADSORPTION;
	
	#CONNECTIONS
	#FEED.OUTLET to SIEVE.INLET;

	# ----------------------------------------------------------------------------------------------------------------------------------------------------------



	##########	
	PARAMETERS
	##########

	##### ----- MATERIAL BALANCE --- #####

	# ----- Thermodynamic Properties -----
	
	PP as Plugin (Brief = "Physical Properties", Type="PP", Project = "PP_GORBACH.vrtherm"); # Peng-Robinson: H2O, CO2, CH4, C5H12
	NComp as Integer (Brief = "Number of Components");

	# ----------------------------------------------------------------------------------------------------------------------------------------------------------


	###	
	SET
	###

	##### ----- DISCRETIZATION ----- #####

	# ----- Number of Finite Elements -----
	
	SIEVE.ne = 40;

	##### ----- MATERIAL BALANCE --- #####

	# ----- Thermodynamic Properties -----
	
	NComp = PP.NumberOfComponents; 

	# ----- Porosity -----
	
	SIEVE.ei = 0.40; # BENYAHIA2005
	SIEVE.epsilon = 0.63; # AHN2004
	
	# ----- Isotherm -----

	SIEVE.Isotherm = "DualSiteLang"; 
	# Define the Isotherm: "ExtDualSiteLang", "DualSiteLang", "Lang3", "Lang"
	
	SIEVE.Aging = 1.000;
	
	# ----- Choosing the LDF Model -----
		
	SIEVE.LDF_Model = "Fitting_kldf"; # "LDF_Macro"; # "LDF_Macro_ExtFilm"; # "LDF_Micro_Macro_ExtFilm"; "Fitting_kldf";
	# Define the particle mass transfer model: "LDF_Micro", "LDF_Macro", "LDF_ExtFilm", "LDF_Micro_Macro", "LDF_Micro_ExtFilm", "LDF_Macro_ExtFilm", "LDF_Micro_Macro_ExtFilm", "Fitting_kldf"

	#SIEVE.defined_kldf = [10.71927E-03,8.45163E-03,8.82451E-03,1.90798E-03]*'1/s'; # (Vasconcelos2020)
	#SIEVE.defined_kldf = [0.0000247876677795747,0.0090919096124952,0.060394849112245]*'1/s';
	SIEVE.defined_kldf_H2O = 0.00052; # Cavalcante calculado
	SIEVE.defined_kldf = [SIEVE.defined_kldf_H2O, 0.0, 0.0]*'1/s'; # Cavalcante estimado

	SIEVE.Theta = 0.0345*'1/s';
	SIEVE.Zero = 1.0E-10;
	
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------



	#######	
	SPECIFY
	#######	

	##### ----- DISCRETIZATION ----- #####

	# ----- Number of Elements -----
	
	#SIEVE.OCFEM.h=[0,1/2,1]; # 2 elements
	#SIEVE.OCFEM.h=[0,1/4,2/4,3/4,1]; # 4 elements
	#SIEVE.OCFEM.h=[0,1/6,2/6,3/6,4/6,5/6,1]; # 6 elements
	#SIEVE.OCFEM.h=[0,1/8,2/8,3/8,4/8,5/8,6/8,7/8,1]; # 8 elements
	#SIEVE.OCFEM.h=[0,1/10,2/10,3/10,4/10,5/10,6/10,7/10,8/10,9/10,1]; # 10 elements
	#SIEVE.OCFEM.h=[0,1/16,2/16,3/16,4/16,5/16,6/16,7/16,8/16,9/16,10/16,11/16,12/16,13/16,14/16,15/16,1]; # 16 elements
	#SIEVE.OCFEM.h=[0,1/20,2/20,3/20,4/20,5/20,6/20,7/20,8/20,9/20,10/20,11/20,12/20,13/20,14/20,15/20,16/20,17/20,18/20,19/20,1]; # 20 elements
	#SIEVE.OCFEM.h=[0,1/25,2/25,3/25,4/25,5/25,6/25,7/25,8/25,9/25,10/25,11/25,12/25,13/25,14/25,15/25,16/25,17/25,18/25,19/25,20/25,21/25,22/25,23/25,24/25,1]; # 25 elements
	#SIEVE.OCFEM.h=[0,1/30,2/30,3/30,4/30,5/30,6/30,7/30,8/30,9/30,10/30,11/30,12/30,13/30,14/30,15/30,16/30,17/30,18/30,19/30,20/30,21/30,22/30,23/30,24/30,25/30,26/30,27/30,28/30,29/30,1]; # 30 elements
	#SIEVE.OCFEM.h=[0,1/35,2/35,3/35,4/35,5/35,6/35,7/35,8/35,9/35,10/35,11/35,12/35,13/35,14/35,15/35,16/35,17/35,18/35,19/35,20/35,21/35,22/35,23/35,24/35,25/35,26/35,27/35,28/35,29/35,30/35,31/35,32/35,33/35,34/35,1]; # 35 elements
	SIEVE.OCFEM.h=[0,1/40,2/40,3/40,4/40,5/40,6/40,7/40,8/40,9/40,10/40,11/40,12/40,13/40,14/40,15/40,16/40,17/40,18/40,19/40,20/40,21/40,22/40,23/40,24/40,25/40,26/40,27/40,28/40,29/40,30/40,31/40,32/40,33/40,34/40,35/40,36/40,37/40,38/40,39/40,1]; # 40 elements
	#SIEVE.OCFEM.h=[0,1/45,2/45,3/45,4/45,5/45,6/45,7/45,8/45,9/45,10/45,11/45,12/45,13/45,14/45,15/45,16/45,17/45,18/45,19/45,20/45,21/45,22/45,23/45,24/45,25/45,26/45,27/45,28/45,29/45,30/45,31/45,32/45,33/45,34/45,35/45,36/45,37/45,38/45,39/45,40/45,41/45,42/45,43/45,44/45,1]; # 45 elements
	#SIEVE.OCFEM.h=[0,1/50,2/50,3/50,4/50,5/50,6/50,7/50,8/50,9/50,10/50,11/50,12/50,13/50,14/50,15/50,16/50,17/50,18/50,19/50,20/50,21/50,22/50,23/50,24/50,25/50,26/50,27/50,28/50,29/50,30/50,31/50,32/50,33/50,34/50,35/50,36/50,37/50,38/50,39/50,40/50,41/50,42/50,43/50,44/50,45/50,46/50,47/50,48/50,49/50,1]; # 50 elements
	#SIEVE.OCFEM.h=[0,1/60,2/60,3/60,4/60,5/60,6/60,7/60,8/60,9/60,10/60,11/60,12/60,13/60,14/60,15/60,16/60,17/60,18/60,19/60,20/60,21/60,22/60,23/60,24/60,25/60,26/60,27/60,28/60,29/60,30/60,31/60,32/60,33/60,34/60,35/60,36/60,37/60,38/60,39/60,40/60,41/60,42/60,43/60,44/60,45/60,46/60,47/60,48/60,49/60,50/60,51/60,52/60,53/60,54/60,55/60,56/60,57/60,58/60,59/60,1]; # 60 elements
	#SIEVE.OCFEM.h=[0,1/80,2/80,3/80,4/80,5/80,6/80,7/80,8/80,9/80,10/80,11/80,12/80,13/80,14/80,15/80,16/80,17/80,18/80,19/80,20/80,21/80,22/80,23/80,24/80,25/80,26/80,27/80,28/80,29/80,30/80,31/80,32/80,33/80,34/80,35/80,36/80,37/80,38/80,39/80,40/80,41/80,42/80,43/80,44/80,45/80,46/80,47/80,48/80,49/80,50/80,51/80,52/80,53/80,54/80,55/80,56/80,57/80,58/80,59/80,60/80,61/80,62/80,63/80,64/80,65/80,66/80,67/80,68/80,69/80,70/80,71/80,72/80,73/80,74/80,75/80,76/80,77/80,78/80,79/80,1]; # 80 elements
	#SIEVE.OCFEM.h=[0,1/100,2/100,3/100,4/100,5/100,6/100,7/100,8/100,9/100,10/100,11/100,12/100,13/100,14/100,15/100,16/100,17/100,18/100,19/100,20/100,21/100,22/100,23/100,24/100,25/100,26/100,27/100,28/100,29/100,30/100,31/100,32/100,33/100,34/100,35/100,36/100,37/100,38/100,39/100,40/100,41/100,42/100,43/100,44/100,45/100,46/100,47/100,48/100,49/100,50/100,51/100,52/100,53/100,54/100,55/100,56/100,57/100,58/100,59/100,60/100,61/100,62/100,63/100,64/100,65/100,66/100,67/100,68/100,69/100,70/100,71/100,72/100,73/100,74/100,75/100,76/100,77/100,78/100,79/100,80/100,81/100,82/100,83/100,84/100,85/100,86/100,87/100,88/100,89/100,90/100,91/100,92/100,93/100,94/100,95/100,96/100,97/100,98/100,99/100,1];
	#SIEVE.OCFEM.h=[0,1/120,2/120,3/120,4/120,5/120,6/120,7/120,8/120,9/120,10/120,11/120,12/120,13/120,14/120,15/120,16/120,17/120,18/120,19/120,20/120,21/120,22/120,23/120,24/120,25/120,26/120,27/120,28/120,29/120,30/120,31/120,32/120,33/120,34/120,35/120,36/120,37/120,38/120,39/120,40/120,41/120,42/120,43/120,44/120,45/120,46/120,47/120,48/120,49/120,50/120,51/120,52/120,53/120,54/120,55/120,56/120,57/120,58/120,59/120,60/120,61/120,62/120,63/120,64/120,65/120,66/120,67/120,68/120,69/120,70/120,71/120,72/120,73/120,74/120,75/120,76/120,77/120,78/120,79/120,80/120,81/120,82/120,83/120,84/120,85/120,86/120,87/120,88/120,89/120,90/120,91/120,92/120,93/120,94/120,95/120,96/120,97/120,98/120,99/120,100/120,101/120,102/120,103/120,104/120,105/120,106/120,107/120,108/120,109/120,110/120,111/120,112/120,113/120,114/120,115/120,116/120,117/120,118/120,119/120,1];
	#SIEVE.OCFEM.h=[0,1/150,2/150,3/150,4/150,5/150,6/150,7/150,8/150,9/150,10/150,11/150,12/150,13/150,14/150,15/150,16/150,17/150,18/150,19/150,20/150,21/150,22/150,23/150,24/150,25/150,26/150,27/150,28/150,29/150,30/150,31/150,32/150,33/150,34/150,35/150,36/150,37/150,38/150,39/150,40/150,41/150,42/150,43/150,44/150,45/150,46/150,47/150,48/150,49/150,50/150,51/150,52/150,53/150,54/150,55/150,56/150,57/150,58/150,59/150,60/150,61/150,62/150,63/150,64/150,65/150,66/150,67/150,68/150,69/150,70/150,71/150,72/150,73/150,74/150,75/150,76/150,77/150,78/150,79/150,80/150,81/150,82/150,83/150,84/150,85/150,86/150,87/150,88/150,89/150,90/150,91/150,92/150,93/150,94/150,95/150,96/150,97/150,98/150,99/150,100/150,101/150,102/150,103/150,104/150,105/150,106/150,107/150,108/150,109/150,110/150,111/150,112/150,113/150,114/150,115/150,116/150,117/150,118/150,119/150,120/150,121/150,122/150,123/150,124/150,125/150,126/150,127/150,128/150,129/150,130/150,131/150,132/150,133/150,134/150,135/150,136/150,137/150,138/150,139/150,140/150,141/150,142/150,143/150,144/150,145/150,146/150,147/150,148/150,149/150,1];
	#SIEVE.OCFEM.h=[0,1/200,2/200,3/200,4/200,5/200,6/200,7/200,8/200,9/200,10/200,11/200,12/200,13/200,14/200,15/200,16/200,17/200,18/200,19/200,20/200,21/200,22/200,23/200,24/200,25/200,26/200,27/200,28/200,29/200,30/200,31/200,32/200,33/200,34/200,35/200,36/200,37/200,38/200,39/200,40/200,41/200,42/200,43/200,44/200,45/200,46/200,47/200,48/200,49/200,50/200,51/200,52/200,53/200,54/200,55/200,56/200,57/200,58/200,59/200,60/200,61/200,62/200,63/200,64/200,65/200,66/200,67/200,68/200,69/200,70/200,71/200,72/200,73/200,74/200,75/200,76/200,77/200,78/200,79/200,80/200,81/200,82/200,83/200,84/200,85/200,86/200,87/200,88/200,89/200,90/200,91/200,92/200,93/200,94/200,95/200,96/200,97/200,98/200,99/200,100/200,101/200,102/200,103/200,104/200,105/200,106/200,107/200,108/200,109/200,110/200,111/200,112/200,113/200,114/200,115/200,116/200,117/200,118/200,119/200,120/200,121/200,122/200,123/200,124/200,125/200,126/200,127/200,128/200,129/200,130/200,131/200,132/200,133/200,134/200,135/200,136/200,137/200,138/200,139/200,140/200,141/200,142/200,143/200,144/200,145/200,146/200,147/200,148/200,149/200,150/200,151/200,152/200,153/200,154/200,155/200,156/200,157/200,158/200,159/200,160/200,161/200,162/200,163/200,164/200,165/200,166/200,167/200,168/200,169/200,170/200,171/200,172/200,173/200,174/200,175/200,176/200,177/200,178/200,179/200,180/200,181/200,182/200,183/200,184/200,185/200,186/200,187/200,188/200,189/200,190/200,191/200,192/200,193/200,194/200,195/200,196/200,197/200,198/200,199/200,1];
	#SIEVE.OCFEM.h=[0,1/300,2/300,3/300,4/300,5/300,6/300,7/300,8/300,9/300,10/300,11/300,12/300,13/300,14/300,15/300,16/300,17/300,18/300,19/300,20/300,21/300,22/300,23/300,24/300,25/300,26/300,27/300,28/300,29/300,30/300,31/300,32/300,33/300,34/300,35/300,36/300,37/300,38/300,39/300,40/300,41/300,42/300,43/300,44/300,45/300,46/300,47/300,48/300,49/300,50/300,51/300,52/300,53/300,54/300,55/300,56/300,57/300,58/300,59/300,60/300,61/300,62/300,63/300,64/300,65/300,66/300,67/300,68/300,69/300,70/300,71/300,72/300,73/300,74/300,75/300,76/300,77/300,78/300,79/300,80/300,81/300,82/300,83/300,84/300,85/300,86/300,87/300,88/300,89/300,90/300,91/300,92/300,93/300,94/300,95/300,96/300,97/300,98/300,99/300,100/300,101/300,102/300,103/300,104/300,105/300,106/300,107/300,108/300,109/300,110/300,111/300,112/300,113/300,114/300,115/300,116/300,117/300,118/300,119/300,120/300,121/300,122/300,123/300,124/300,125/300,126/300,127/300,128/300,129/300,130/300,131/300,132/300,133/300,134/300,135/300,136/300,137/300,138/300,139/300,140/300,141/300,142/300,143/300,144/300,145/300,146/300,147/300,148/300,149/300,150/300,151/300,152/300,153/300,154/300,155/300,156/300,157/300,158/300,159/300,160/300,161/300,162/300,163/300,164/300,165/300,166/300,167/300,168/300,169/300,170/300,171/300,172/300,173/300,174/300,175/300,176/300,177/300,178/300,179/300,180/300,181/300,182/300,183/300,184/300,185/300,186/300,187/300,188/300,189/300,190/300,191/300,192/300,193/300,194/300,195/300,196/300,197/300,198/300,199/300,200/300,201/300,202/300,203/300,204/300,205/300,206/300,207/300,208/300,209/300,210/300,211/300,212/300,213/300,214/300,215/300,216/300,217/300,218/300,219/300,220/300,221/300,222/300,223/300,224/300,225/300,226/300,227/300,228/300,229/300,230/300,231/300,232/300,233/300,234/300,235/300,236/300,237/300,238/300,239/300,240/300,241/300,242/300,243/300,244/300,245/300,246/300,247/300,248/300,249/300,250/300,251/300,252/300,253/300,254/300,255/300,256/300,257/300,258/300,259/300,260/300,261/300,262/300,263/300,264/300,265/300,266/300,267/300,268/300,269/300,270/300,271/300,272/300,273/300,274/300,275/300,276/300,277/300,278/300,279/300,280/300,281/300,282/300,283/300,284/300,285/300,286/300,287/300,288/300,289/300,290/300,291/300,292/300,293/300,294/300,295/300,296/300,297/300,298/300,299/300,300/300];
	#SIEVE.OCFEM.h=[0, 1/400, 2/400, 3/400, 4/400, 5/400, 6/400, 7/400, 8/400, 9/400, 10/400, 11/400, 12/400, 13/400, 14/400, 15/400, 16/400, 17/400, 18/400, 19/400, 20/400, 21/400, 22/400, 23/400, 24/400, 25/400, 26/400, 27/400, 28/400, 29/400, 30/400, 31/400, 32/400, 33/400, 34/400, 35/400, 36/400, 37/400, 38/400, 39/400, 40/400, 41/400, 42/400, 43/400, 44/400, 45/400, 46/400, 47/400, 48/400, 49/400, 50/400, 51/400, 52/400, 53/400, 54/400, 55/400, 56/400, 57/400, 58/400, 59/400, 60/400, 61/400, 62/400, 63/400, 64/400, 65/400, 66/400, 67/400, 68/400, 69/400, 70/400, 71/400, 72/400, 73/400, 74/400, 75/400, 76/400, 77/400, 78/400, 79/400, 80/400, 81/400, 82/400, 83/400, 84/400, 85/400, 86/400, 87/400, 88/400, 89/400, 90/400, 91/400, 92/400, 93/400, 94/400, 95/400, 96/400, 97/400, 98/400, 99/400, 100/400, 101/400, 102/400, 103/400, 104/400, 105/400, 106/400, 107/400, 108/400, 109/400, 110/400, 111/400, 112/400, 113/400, 114/400, 115/400, 116/400, 117/400, 118/400, 119/400, 120/400, 121/400, 122/400, 123/400, 124/400, 125/400, 126/400, 127/400, 128/400, 129/400, 130/400, 131/400, 132/400, 133/400, 134/400, 135/400, 136/400, 137/400, 138/400, 139/400, 140/400, 141/400, 142/400, 143/400, 144/400, 145/400, 146/400, 147/400, 148/400, 149/400, 150/400, 151/400, 152/400, 153/400, 154/400, 155/400, 156/400, 157/400, 158/400, 159/400, 160/400, 161/400, 162/400, 163/400, 164/400, 165/400, 166/400, 167/400, 168/400, 169/400, 170/400, 171/400, 172/400, 173/400, 174/400, 175/400, 176/400, 177/400, 178/400, 179/400, 180/400, 181/400, 182/400, 183/400, 184/400, 185/400, 186/400, 187/400, 188/400, 189/400, 190/400, 191/400, 192/400, 193/400, 194/400, 195/400, 196/400, 197/400, 198/400, 199/400, 200/400, 201/400, 202/400, 203/400, 204/400, 205/400, 206/400, 207/400, 208/400, 209/400, 210/400, 211/400, 212/400, 213/400, 214/400, 215/400, 216/400, 217/400, 218/400, 219/400, 220/400, 221/400, 222/400, 223/400, 224/400, 225/400, 226/400, 227/400, 228/400, 229/400, 230/400, 231/400, 232/400, 233/400, 234/400, 235/400, 236/400, 237/400, 238/400, 239/400, 240/400, 241/400, 242/400, 243/400, 244/400, 245/400, 246/400, 247/400, 248/400, 249/400, 250/400, 251/400, 252/400, 253/400, 254/400, 255/400, 256/400, 257/400, 258/400, 259/400, 260/400, 261/400, 262/400, 263/400, 264/400, 265/400, 266/400, 267/400, 268/400, 269/400, 270/400, 271/400, 272/400, 273/400, 274/400, 275/400, 276/400, 277/400, 278/400, 279/400, 280/400, 281/400, 282/400, 283/400, 284/400, 285/400, 286/400, 287/400, 288/400, 289/400, 290/400, 291/400, 292/400, 293/400, 294/400, 295/400, 296/400, 297/400, 298/400, 299/400, 300/400, 301/400, 302/400, 303/400, 304/400, 305/400, 306/400, 307/400, 308/400, 309/400, 310/400, 311/400, 312/400, 313/400, 314/400, 315/400, 316/400, 317/400, 318/400, 319/400, 320/400, 321/400, 322/400, 323/400, 324/400, 325/400, 326/400, 327/400, 328/400, 329/400, 330/400, 331/400, 332/400, 333/400, 334/400, 335/400, 336/400, 337/400, 338/400, 339/400, 340/400, 341/400, 342/400, 343/400, 344/400, 345/400, 346/400, 347/400, 348/400, 349/400, 350/400, 351/400, 352/400, 353/400, 354/400, 355/400, 356/400, 357/400, 358/400, 359/400, 360/400, 361/400, 362/400, 363/400, 364/400, 365/400, 366/400, 367/400, 368/400, 369/400, 370/400, 371/400, 372/400, 373/400, 374/400, 375/400, 376/400, 377/400, 378/400, 379/400, 380/400, 381/400, 382/400, 383/400, 384/400, 385/400, 386/400, 387/400, 388/400, 389/400, 390/400, 391/400, 392/400, 393/400, 394/400, 395/400, 396/400, 397/400, 398/400, 399/400, 400/400];
	#SIEVE.OCFEM.h=[0,1/500,2/500,3/500,4/500,5/500,6/500,7/500,8/500,9/500,10/500,11/500,12/500,13/500,14/500,15/500,16/500,17/500,18/500,19/500,20/500,21/500,22/500,23/500,24/500,25/500,26/500,27/500,28/500,29/500,30/500,31/500,32/500,33/500,34/500,35/500,36/500,37/500,38/500,39/500,40/500,41/500,42/500,43/500,44/500,45/500,46/500,47/500,48/500,49/500,50/500,51/500,52/500,53/500,54/500,55/500,56/500,57/500,58/500,59/500,60/500,61/500,62/500,63/500,64/500,65/500,66/500,67/500,68/500,69/500,70/500,71/500,72/500,73/500,74/500,75/500,76/500,77/500,78/500,79/500,80/500,81/500,82/500,83/500,84/500,85/500,86/500,87/500,88/500,89/500,90/500,91/500,92/500,93/500,94/500,95/500,96/500,97/500,98/500,99/500,100/500,101/500,102/500,103/500,104/500,105/500,106/500,107/500,108/500,109/500,110/500,111/500,112/500,113/500,114/500,115/500,116/500,117/500,118/500,119/500,120/500,121/500,122/500,123/500,124/500,125/500,126/500,127/500,128/500,129/500,130/500,131/500,132/500,133/500,134/500,135/500,136/500,137/500,138/500,139/500,140/500,141/500,142/500,143/500,144/500,145/500,146/500,147/500,148/500,149/500,150/500,151/500,152/500,153/500,154/500,155/500,156/500,157/500,158/500,159/500,160/500,161/500,162/500,163/500,164/500,165/500,166/500,167/500,168/500,169/500,170/500,171/500,172/500,173/500,174/500,175/500,176/500,177/500,178/500,179/500,180/500,181/500,182/500,183/500,184/500,185/500,186/500,187/500,188/500,189/500,190/500,191/500,192/500,193/500,194/500,195/500,196/500,197/500,198/500,199/500,200/500,201/500,202/500,203/500,204/500,205/500,206/500,207/500,208/500,209/500,210/500,211/500,212/500,213/500,214/500,215/500,216/500,217/500,218/500,219/500,220/500,221/500,222/500,223/500,224/500,225/500,226/500,227/500,228/500,229/500,230/500,231/500,232/500,233/500,234/500,235/500,236/500,237/500,238/500,239/500,240/500,241/500,242/500,243/500,244/500,245/500,246/500,247/500,248/500,249/500,250/500,251/500,252/500,253/500,254/500,255/500,256/500,257/500,258/500,259/500,260/500,261/500,262/500,263/500,264/500,265/500,266/500,267/500,268/500,269/500,270/500,271/500,272/500,273/500,274/500,275/500,276/500,277/500,278/500,279/500,280/500,281/500,282/500,283/500,284/500,285/500,286/500,287/500,288/500,289/500,290/500,291/500,292/500,293/500,294/500,295/500,296/500,297/500,298/500,299/500,300/500,301/500,302/500,303/500,304/500,305/500,306/500,307/500,308/500,309/500,310/500,311/500,312/500,313/500,314/500,315/500,316/500,317/500,318/500,319/500,320/500,321/500,322/500,323/500,324/500,325/500,326/500,327/500,328/500,329/500,330/500,331/500,332/500,333/500,334/500,335/500,336/500,337/500,338/500,339/500,340/500,341/500,342/500,343/500,344/500,345/500,346/500,347/500,348/500,349/500,350/500,351/500,352/500,353/500,354/500,355/500,356/500,357/500,358/500,359/500,360/500,361/500,362/500,363/500,364/500,365/500,366/500,367/500,368/500,369/500,370/500,371/500,372/500,373/500,374/500,375/500,376/500,377/500,378/500,379/500,380/500,381/500,382/500,383/500,384/500,385/500,386/500,387/500,388/500,389/500,390/500,391/500,392/500,393/500,394/500,395/500,396/500,397/500,398/500,399/500,400/500,401/500,402/500,403/500,404/500,405/500,406/500,407/500,408/500,409/500,410/500,411/500,412/500,413/500,414/500,415/500,416/500,417/500,418/500,419/500,420/500,421/500,422/500,423/500,424/500,425/500,426/500,427/500,428/500,429/500,430/500,431/500,432/500,433/500,434/500,435/500,436/500,437/500,438/500,439/500,440/500,441/500,442/500,443/500,444/500,445/500,446/500,447/500,448/500,449/500,450/500,451/500,452/500,453/500,454/500,455/500,456/500,457/500,458/500,459/500,460/500,461/500,462/500,463/500,464/500,465/500,466/500,467/500,468/500,469/500,470/500,471/500,472/500,473/500,474/500,475/500,476/500,477/500,478/500,479/500,480/500,481/500,482/500,483/500,484/500,485/500,486/500,487/500,488/500,489/500,490/500,491/500,492/500,493/500,494/500,495/500,496/500,497/500,498/500,499/500,1];
	
	##### ----- MATERIAL BALANCE --- #####

	# ----- Initial Variables -----	
	
	# Mw=28.96
	#SIEVE.zini = [0.0, 0.7624948387893985, 0.23750516121060147]; # -> CASO A
	#SIEVE.zini = [0.0, 0.7624563387036832, 0.23754366129631674]; # -> CASO B
	#SIEVE.zini = [0.0, 0.7624926913583224, 0.2375073086416776]; # -> CASO C
	SIEVE.zini = [0.0, 0.7625098697197, 0.2374901302803]; # -> CASO D
	# Mw=30.45
	#SIEVE.zini = [0.0, 0.3886013910404401, 0.6113986089595599]; # -> CASO A
	#SIEVE.zini = [0.0, 0.3886319920850955, 0.6113680079149045]; # -> CASO B
	#SIEVE.zini = [0.0, 0.38859586300742344, 0.6114041369925766]; # -> CASO C
	#SIEVE.zini = [0.0, 0.38864008447274634, 0.6113599155272537]; # -> CASO D
	# Desirable_mub_Air=2.0E-05
	#SIEVE.zini = [0.004594, 0.0870203, 0.912980]; # -> CASO A -> 1.99E-05
	#SIEVE.zini = [0.004410, 0.1007760, 0.899234]; # -> CASO B -> 2.01E-05
	#SIEVE.zini = [0.004603, 0.4149030, 0.585097]; # -> CASO C -> 1.99E-05
	#SIEVE.zini = [0.004531, 0.5000010, 0.499999]; # -> CASO D -> 2.10E-05
	
	
	# ----- Inlet Variables -----	

	#Zi0

	# Mw=28.96
	#SIEVE.zi0 = [0.004594, 0.7589919375, 0.23641406249999997]; # -> CASO A
	#SIEVE.zi0 = [0.004410, 0.75909390625, 0.23649609374999997]; # -> CASO B
	#SIEVE.zi0 = [0.004603, 0.7589829375, 0.23641406249999997]; # -> CASO C
	SIEVE.zi0 = [0.004531, 0.7590549375000001, 0.23641406249999997]; # -> CASO D
	# Mw=30.45
	#SIEVE.zi0 = [0.004594, 0.3868161562500003, 0.6085898437499997]; # -> CASO A
	#SIEVE.zi0 = [0.004410, 0.3869181250000002, 0.6086718749999998]; # -> CASO B
	#SIEVE.zi0 = [0.004603, 0.3868071562500003, 0.6085898437499997]; # -> CASO C
	#SIEVE.zi0 = [0.004531, 0.38687915625000036, 0.6085898437499997]; # -> CASO D
	# Desirable_mub_Air=2.0E-05
	#SIEVE.zi0 = [0.004594, 0.0866206, 0.908785]; # -> CASO A -> 2.01E-05
	#SIEVE.zi0 = [0.004410, 0.1003210, 0.895269]; # -> CASO B -> 2.01E-05
	#SIEVE.zi0 = [0.004603, 0.4129930, 0.582404]; # -> CASO C -> 1.99E-05
	#SIEVE.zi0 = [0.004531, 0.4977335, 0.497734]; # -> CASO D -> 2.10E-05
	
	#SIEVE.T0 = ((30.0)+273.15)*'K'; # -> CASO A
	#SIEVE.T0 = ((30.0)+273.15)*'K'; # -> CASO B
	#SIEVE.T0 = ((50.0)+273.15)*'K'; # -> CASO C
	SIEVE.T0 = ((80.0)+273.15)*'K'; # -> CASO D
	
	#SIEVE.P0 = (5.0)*'bar'; # -> CASO A
	#SIEVE.P0 = (2.0)*'bar'; # -> CASO B
	#SIEVE.P0 = (2.0)*'bar'; # -> CASO C
	SIEVE.P0 = (2.0)*'bar'; # -> CASO D

	#SIEVE.Fnormal = (1.84)*'l/min'; # -> CASO A
	#SIEVE.Fnormal = (1.998)*'l/min'; # -> CASO B
	#SIEVE.Fnormal = (2.00)*'l/min'; # -> CASO C
	SIEVE.Fnormal = (1.98)*'l/min'; # -> CASO D
	
	# ----- Geometry -----
	
	SIEVE.dB = (0.01)*'m';
	SIEVE.L = (0.797)*'m';

	SIEVE.Rp = (0.0005)*'m';
	SIEVE.Rc = (0.00166)*'m';
	SIEVE.rp = (1.086E-07)*'m';

	SIEVE.Vatomic = [13.1, 18.5, 16.3]*'m^3'; # FULLER1969
	SIEVE.tortuosity = 4.0; # AHN2004 # tortuosity = 1;
	
	# ----- Thermodynamic Properties -----

	#SIEVE.Zi0 = (0.838059442299991); # Cavalcante2023
	
	# ----- Bulk Transport Properties -----

	#SIEVE.Mwb = (21.633160396967518)*'kg/kmol'; # Cavalcante2023 
	#SIEVE.mub = (0.0000142295157278945)*'kg/m/s'; # Cavalcante2023
	#SIEVE.rhob = (73.6950823557062)*'kg/m^3'; # Cavalcante2023
	#SIEVE.rhop = 1091*'kg/(m^3)'; # SEABRA2019
	SIEVE.rhoB = (736.5)*'kg/m^3';

	##### ----- ENERGY BALANCE ----- #####

	# ----- Initial Variables -----	
	
	SIEVE.Tbini = SIEVE.T0; # 323*'K';

	# ----- Bulk Energy Transport Properties -----
	
	#SIEVE.Kb = (0.0368428903477514)*'W/m/K'; # Cavalcante2023
	#SIEVE.Cpb_mol = (47.4416081509794)*'kJ/kmol/K'; # Cavalcante2023

	SIEVE.Hads = [-54.961, 0.0, 0.0]*'kJ/mol'; # H2O, N2, O2 (CAVALCANTE2023)
	SIEVE.Cpp = 0.920*'kJ/kg/K'; # 
	
	# ----------------------------------------------------------------------------------------------------------------------------------------------------------


	#######
	INITIAL # tau=0
	#######

	##### ----- MATERIAL BALANCE ----- #####
	
	# ----- Bulk Material Balance Initial Conditions -----

	SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,1) = SIEVE.Ybini(1);
	SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,2) = SIEVE.Ybini(2);
	SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,3) = SIEVE.Ybini(3);
	
	# ----- Solid Material Balance Initial Conditions -----

	SIEVE.OCFEM.ub(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne,1) = SIEVE.uini(1);
	SIEVE.OCFEM.ub(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne,2) = SIEVE.uini(2);
	SIEVE.OCFEM.ub(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne,3) = SIEVE.uini(3);

	##### ----- ENERGY BALANCE ------- #####

	# ----- Bulk Energy Balance Initial Conditions -----

	SIEVE.OCFEM.THETAb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne) = SIEVE.THETAbini; 
	
	# ----- Solid Energy Balance Initial Conditions -----
	
	SIEVE.OCFEM.THETAp(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne) = SIEVE.THETApini; 
	# Vai de 1 ate np porque THETAp nao tem derivada com relacao a Z

	# ----------------------------------------------------------------------------------------------------------------------------------------------------------

end

CaseStudy Case_Study as TESTANDO
	
	VARY
	
	#SIEVE.defined_kldf_H2O = [ 0.00050 : 0.00001 : 0.00054 ];
	SIEVE.epsilon = [ 0.10 : 0.10 : 0.90 ];
	SIEVE.ei = [ 0.10 : 0.10 : 0.90 ];

	RESPONSE
	
	zb_H2O;

end

Estimation Estimating as TESTANDO
	
	ESTIMATE
	# PARAMETER  					START     LOWER     UPPER
	SIEVE.defined_kldf_H2O			0.000520    0.000010    0.001000;
	#SIEVE.epsilon					0.630000    0.100000    0.900000;
	#SIEVE.ei						0.400000    0.100000    0.900000;

	EXPERIMENTS
	# DATA FILE             WEIGTH
	"Teste.dat"      		1;
	
	OPTIONS
	Dynamic = true;

	NLPSolver(
		MaxIterations = 1000,
		File = "complex"
#		File = "ipopt_emso"
	);
end

Optimization OPTIMIZATION
	
	SPECIFY
	zi0_H2O = 0.004594;
	Desirable_Mw_Air = 28.96*'kg/kmol';

	SET 
	Mw_O2 = 31.9988*'kg/kmol';
	Mw_N2 = 28.0134*'kg/kmol';	

	VARIABLES
	zi0_N2 as Real (Brief = "Inlet N2 Molar Fraction", Default=0.79, Lower=1.0E-06, Upper=1.0);
	zi0_O2 as Real (Brief = "Inlet O2 Molar Fraction", Default=0.21, Lower=1.0E-06, Upper=1.0);
	zini_N2 as Real (Brief = "Initial N2 Molar Fraction", Default=0.79, Lower=1.0E-06, Upper=1.0);
	zini_O2 as Real (Brief = "Initial N2 Molar Fraction", Default=0.21, Lower=1.0E-06, Upper=1.0);
	zi0_H2O as Real (Brief = "Calculated Air Molecular Weight", Default=0.004594, Lower=1.0E-06, Upper=1.0);
    Calc_Mw_Air as Real (Brief = "Calculated Air Molecular Weight", Unit = 'kg/kmol', Default=0.21);
    Desirable_Mw_Air as Real (Brief = "Desirable Air Molecular Weight", Unit = 'kg/kmol', Default=28.96);

	PARAMETERS
	Mw_O2 as Real (Brief = "O2 Molecular Weight", Unit = 'kg/kmol', Default=0.21, Lower=1.0E-06, Upper=1.0);
	Mw_N2 as Real (Brief = "N2 Molecular Weight", Unit = 'kg/kmol', Default=0.21, Lower=1.0E-06, Upper=1.0);
	
	EQUATIONS
    zi0_N2 = (1.000000 - zi0_H2O) - zi0_O2;
	
	zini_N2 =  zi0_N2/(zi0_O2+zi0_N2);
	zini_O2 = zi0_O2/(zi0_O2+zi0_N2);
	
    Calc_Mw_Air = Mw_O2 * zi0_O2/(zi0_O2+zi0_N2) + Mw_N2 * zi0_N2/(zi0_O2+zi0_N2);

	MINIMIZE
	(Calc_Mw_Air - Desirable_Mw_Air)^2;

	OPTIONS
	NLPSolver(MaxIterations=2000,
			  AbsoluteAccuracy=1e-10,
			  RelativeAccuracy=1e-10,
			  #File = "ipopt_emso", hessian_approximation = "exact"
			  #File = "complex"
	          #File = "optpp_emso"
			  #File = "arshj"
			  #File = "PSO"
			  File = "ipopt_emso"
			  );
	Dynamic = false;
end

Optimization OPTIMIZATION_mu
	
	PARAMETERS
	NComp as Integer (Brief = "Number of Components");
	
	SET
	NComp = PP.NumberOfComponents;

	SPECIFY
	z_H2O = 0.004410;
	Desirable_mu_dry = 2.00E-05*'kg/m/s';
	T = ((30.0)+273.15)*'K';
	P = (2.0)*'bar';

	VARIABLES
	z_N2 as positive (Brief = "Inlet N2 Molar Fraction", Default=0.79, Lower=1.0E-06, Upper=1.0);
	z_O2 as positive (Brief = "Inlet O2 Molar Fraction", Default=0.21, Lower=1.0E-06, Upper=1.0);
	z_N2_dry as positive (Brief = "Initial N2 Molar Fraction", Default=0.79, Lower=1.0E-06, Upper=1.0);
	z_O2_dry as positive (Brief = "Initial N2 Molar Fraction", Default=0.21, Lower=1.0E-06, Upper=1.0);
	z_dry(NComp) as positive (Brief = "Initial N2 Molar Fraction", Default=0.21, Lower=1.0E-06, Upper=1.0);
	z_H2O as Real (Brief = "Calculated Dry Gas Molecular Weight", Default=0.005000, Lower=1.0E-06, Upper=1.0);
    Calc_mu_dry as Real (Brief = "Calculated Dry Gas Molecular Weight", Unit = 'kg/m/s', Default=2.0E-05);
    Desirable_mu_dry as Real (Brief = "Desirable Dry Gas Molecular Weight", Unit = 'kg/m/s', Default=2.0E-05);
	
	z(NComp) as positive (Brief = "Inlet Bulk Molar Fraction");
	T as temperature (Brief = "Inlet Temperature");
	P as positive (Brief = "Inlet Pressure", Unit = 'bar');

	PARAMETERS
	PP as Plugin (Brief = "Physical Properties", Type="PP", Project = "PP_GORBACH.vrtherm");
	
	EQUATIONS
    z_dry = [0.0000000000000, z_N2_dry, z_O2_dry];
	
	z_N2 = (1.000000 - z_H2O) - z_O2;
	
	z_N2_dry =  z_N2/(z_O2+z_N2);
	z_O2_dry = z_O2/(z_O2+z_N2);
	
    Calc_mu_dry = PP.VapourViscosity(T,P,z_dry);

	MINIMIZE
	(Calc_mu_dry - Desirable_mu_dry)^2;

	OPTIONS
	NLPSolver(MaxIterations=1000,
			  AbsoluteAccuracy=1e-15,
			  RelativeAccuracy=1e-15,
			  #File = "ipopt_emso", hessian_approximation = "exact"
			  #File = "complex"
	          #File = "optpp_emso"
			  #File = "arshj"
			  #File = "PSO"
			  File = "ipopt_emso"
			  );
	Dynamic = false;
end


################################################################################
################################################################################
##### ----- MODEL -------------------------------------------------------- #####
################################################################################
################################################################################


Model ADSORPTION


	##########
	PARAMETERS
	##########

	##### ----- DISCRETIZATION ----- #####
	
	# ----- Number of Nodal Points -----
	
	np as Integer (Brief = "Number of Colocation Points");
	
	# ----- Number of Elements -----
	
	ne as Integer (Brief = "Number of Elements");
	
	##### ----- MATERIAL BALANCE ----- #####
	
	# ----- Inlet Variables -----

	outer NComp as Integer (Brief = "Number of Components");	
	
	# ----- Geometry -----	
	
	PInumber as positive (Brief = "PI Number Constant");
	
	# ----- Transport Properties -----	
	
	M(NComp) as molweight (Brief = "Pure Component Molecular Weight");
	
	# ----- Thermodynamics Properties -----	
	
	outer PP as Plugin (Brief = "Physical Properties", Type="PP", Project = "PP_GORBACH.vrtherm");
	R as Real (Brief = "Universal Gas Constant", Unit = 'J/(mol*K)');
	
	Tnormal as temperature (Brief = "Normal Temperature");
	Pnormal as positive (Brief = "Normal Pressure", Unit = 'kPa');
	
	# ----- Porosities -----	
	
	ei as positive (Brief = "Interparticle Voidage");
	epsilon as positive (Brief = "Total Bed Voidage");
	
	# ----- Choosing the LDF Model -----

	LDF_Model as Switcher (Valid = ["LDF_Micro", "LDF_Macro", "LDF_ExtFilm", "LDF_Micro_Macro", "LDF_Micro_ExtFilm", "LDF_Macro_ExtFilm", "LDF_Micro_Macro_ExtFilm", "Fitting_kldf"], Default = "Fitting_kldf");

	defined_kldf(NComp) as Real (Brief = "Global Mass Transfer Coefficient", Unit = '1/s');
	defined_kldf_H2O as Real (Brief = "Global Mass Transfer Coefficient for Water");
	
	Zero as Real (Brief = "Parameter for the Gorbach LDF Model");
	Theta as Real (Brief = "Parameter for the Gorbach LDF Model", Unit = '1/s');
	
	##### ----- ISOTHERM -----

	Isotherm as Switcher (Valid = ["Gorbach", "ExtDualSiteLang", "DualSiteLang", "Lang3"], Default = "DualSiteLang");	
	
	Aging as Real (Brief = "Aging Factor");

	# ----- Extended Dual Site Langmuir Isotherm (Gholami2010b)
	
	D0(NComp) as Real (Brief = "Corrected Crystalline Difusivity", Unit = 'm^2/s');
	Energy(NComp) as Real (Brief = "Affinity Constant Activation Energy", Unit = 'J/mol');
	b0(NComp,2) as Real (Unit = '1/kPa');
	E(NComp,2) as Real (Brief = "Affinity Constant Activation Energy", Unit = 'J/mol');	
	A1(NComp,2) as Real (Brief = "Adsorption Equilibrium Parameters", Unit = '(mol*K)/kg');
	A2(NComp,2) as Real (Brief = "Adsorption Equilibrium Parameters", Unit = 'mol/kg');

	# ----- Extended Dual Site Langmuir Isotherm (Cavalcante2023)

	IPC1(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = 'kmol/kg/bar');
	IPC2(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = 'K');
	IPC3(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = '1/bar');
	IPC4(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = 'K');
	IPC5(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = 'kmol/kg/bar');
	IPC6(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = 'K');
	IPC7(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = '1/bar');
	IPC8(NComp) as Real (Brief = "Estimated Isotherm Parameters", Unit = 'K');

	# ----- Langmuir 3 Isotherm (Vasconcelos2020) # O "quarto" elemento nao e adsorvido, logo e igual a zero.
	
	IPV1(NComp) as Real (Brief = "Estimated Langmuir 3 Isotherm Parameters", Unit = 'kmol/kg');
	IPV2(NComp) as Real (Brief = "Estimated Langmuir 3 Isotherm Parameters", Unit = 'kmol/kg/K');
	IPV3(NComp) as Real (Brief = "Estimated Langmuir 3 Isotherm Parameters", Unit = '1/bar');
	IPV4(NComp) as Real (Brief = "Estimated Langmuir 3 Isotherm Parameters", Unit = 'K');

	# ----- Gorbach Isotherm
	
	b00_kgperkg as Real (Brief = "Gorbach Parameter b0,0", Unit = 'kg/kg');
	b10 as Real (Brief = "Gorbach Parameter b1,0", Unit = '1/bar'); 
	b20 as Real (Brief = "Gorbach Parameter b2,0", Unit = '1/bar^2');
	b30 as Real (Brief = "Gorbach Parameter b3,0", Unit = '1/bar');
	b40 as Real (Brief = "Gorbach Parameter b4,0", Unit = '1/bar^2');

	b00 as Real (Brief = "Gorbach Parameter b0,0", Unit = 'kmol/kg');

	b0T as Real (Brief = "Gorbach Parameter b0,T");
	b1T as Real (Brief = "Gorbach Parameter b1,T");
	b2T as Real (Brief = "Gorbach Parameter b2,T");
	b3T as Real (Brief = "Gorbach Parameter b3,T");
	b4T as Real (Brief = "Gorbach Parameter b4,T");

	Tref as Real (Brief = "Gorbach Reference Temperature", Unit = 'K');

	# ---------------------------------------------------------------------------------------------------------------------------------------------------------



	###
	SET
	###

	##### ----- DISCRETIZATION ----- #####
	
	# ----- Number of Nodal Points -----

	np = OCFEM.MCO.NodalPoints;
	#NofS = 8; # Numero de simulacoes industriais, segundo Cavalcante2023.
	
	##### ----- MATERIAL BALANCE ----- #####

	# ----- Geometry -----	

	PInumber = 3.14159265359;
	
	# ----- Transport Properties -----	

	#M = [18.02,44.01,16.04]*'kg/kmol'; 
	M = PP.MolecularWeight(); # Pure Component Molar Weight
	
	# ----- Thermodynamics Properties -----	
	
	R = 8.314462618*'kJ/(kmol*K)'; # R = 8.314*'kJ/(kmol*K)';

	Tnormal = (0.0+273.15)*'K';
	Pnormal = 1.0*'atm'; # 101.325*'kPa';
	
	##### ----- ISOTHERM -----

	# ----- Extended Dual Site Langmuir Isotherm (Gholami2010b)
	
	b0(:,1) = [3.58E-07,3.32E-07,6.77E-06]*'1/kPa'; # Gholami2010b 3 Components
	b0(:,2) =  [1.62E-05,6.43E-07,6.13E-07]*'1/kPa'; # Gholami2010b 3 Components
	E(:,1) = [44140.040,41077.100,13672.210]*'J/mol'; # Gholami2010b 3 Components
	E(:,2) = [45199.990,29812.290,20307.220]*'J/mol'; # Gholami2010b 3 Components
	A1(:,1) = [-3799.94,516.743,348.971]*'(mol*K)/kg'; #A11: primeiro parametro do primeiro sitio # Gholami2010b 3 Components
	A1(:,2) = [3684.491,-932.131,348.971]*'(mol*K)/kg';	#A21: segundo parametro do primeiro sitio # Gholami2010b 3 Components
	A2(:,1) = [18.711,-0.794,0.542]*'mol/kg'; #A12 # Gholami2010b 3 Components
	A2(:,2) = [-4.45,6.083,0.542]*'mol/kg'; #A22 # Gholami2010b 3 Components
	Energy = [17288.47,26334.00,12551.94]*'J/mol'; # Gholami2010b 3 Components
	D0 = [2.39E-08,5.90E-11,7.20E-12]*'(m^2)/s'; # Gholami2010b 3 Components

	# ----- Extended Dual Site Langmuir Isotherm (Cavalcante2023)
	
	IPC1 = [2.57664E-08,0.00000,0.00000]*'kmol/kg/bar'; #IPC1 # Zerei para N2 e O2, pois estes elementos nao adsorvem no leito
	IPC2 = [6745.02002,406.364,2439]*'K'; #IPC2 
	IPC3 = [2.65809E-06,0.275,3.414E-05]*'1/bar'; #IPC3
	IPC4 = [6750.42677,0.0,2555]*'K'; #IPC4
	IPC5 = [6.12115E-05,0.00000,0.00000]*'kmol/kg/bar'; #IPC5 # Zerei para N2 e O2, pois estes elementos nao adsorvem no leito
	IPC6 = [5694.62358,562.917,0.0]*'K'; #IPC6
	IPC7 = [0.05923,43.57,10000]*'1/bar'; #IPC7
	IPC8 = [5553.31015,107.742,0.0]*'K'; #IPC8
	
	# ----- Langmuir 3 Isotherm (Vasconcelos2020) # O "quarto" elemento nao e adsorvido, logo e igual a zero.
	
	IPV1 = [0.015358000,0.004949088,0.003152522]*'kmol/kg'; #Vasconcelos2020
	IPV2 = [2.29060E-05,6.29477E-06,0.0]*'kmol/kg/K'; #Vasconcelos2020
	IPV3 = [5.38030E-08,0.001906942,6.82223E-05]*'1/bar'; #Vasconcelos2020
	IPV4 = [6314.671300,3020.342254,2381.605255]*'K'; #Vasconcelos2020

	# ----- Gorbach Isotherm

	b00_kgperkg = 0.0118003*'kg/kg'; # [kg(Species)/kg(Solid)] Gorbach Parameter b0,0
	b10 = 2.03629E-03 * 1E+03 *'1/bar';  # Gorbach Parameter b1,0 [1/bar]
	b20 = 1.75732E-10 * 1E+06 *'1/bar^2';  # Gorbach Parameter b2,0 [1/bar?]
	b30 = 2.24522E-03 * 1E+03 *'1/bar';  # Gorbach Parameter b3,0 [1/bar]
	b40 = 1.22430E-11 * 1E+06 *'1/bar^2';  # Gorbach Parameter b4,0 [1/bar?]

	b00 = b00_kgperkg / M(1);  # b0,0 [kmol(Species)/kg(Solid)] Gorbach Parameter b0,0

	b0T = 5.0E-06; # Gorbach Parameter b0,T
	b1T = 18.4468; # Gorbach Parameter b1,T
	b2T = 41.3509; # Gorbach Parameter b2,T
	b3T = 17.2808; # Gorbach Parameter b3,T
	b4T = 41.1549; # Gorbach Parameter b4,T

	Tref = 273.25*'K'; # Gorbach Reference Temperature

	# ---------------------------------------------------------------------------------------------------------------------------------------------------------



	#########
	VARIABLES
	#########
	
	##### ----- CONNECTIONS -------- #####
	
	#in Inlet as stream (Brief = "Inlet Stream", PosX=0.5, PosY=0, Symbol="_{in}");
	#out Outlet as stream (Brief = "Outlet Stream", PosX=0.5, PosY=1, Symbol="_{out}");

	##### ----- DISCRETIZATION ----- #####
	
	# ----- Plug-in OCFEM -----
	
	OCFEM as MCO_EF;
	
	##### ----- MATERIAL BALANCE ----- #####

	# ----- Initial Variables -----
	
	zini(NComp) as Real (Brief = "Initial Molar Fraction");
	
	# ----- Inlet Variables -----
	
	zi0(NComp) as Real (Brief = "Inlet Bulk Molar Fraction");
	Fnormal as positive (Brief = "Inlet Gas Flow", Unit = 'l/min');
	F0 as positive (Brief = "Inlet Gas Flow", Unit = 'l/min'); # (Brief = "Inlet Gas Flow", Unit = 'kmol/h');
	m0 as flow_mass (Brief = "Inlet Mass Flow");
	T0 as temperature (Brief = "Inlet Temperature");
	P0 as positive (Brief = "Inlet Pressure", Unit = 'kPa');
	
	# ----- Geometry -----

	L as length (Brief = "Sieve Length");
	dB as length (Brief = "Bed Diameter");
	
	Rp as Real (Brief = "Particle Radius", Unit = 'm');
	Rc as Real (Brief = "Crystal Radius", Unit = 'm');
	rp as Real (Brief = "Average Pore Radius", Unit = 'm'); 
	
	tortuosity as Real (Brief = "Tortuosity");
	Vatomic(NComp) as Real (Brief = "Special Atomic Diffusion Volume", Unit = 'm^3'); # Fuller1969

	Across as area (Brief = "Cross Section Area");

	# ----- Porosity -----

	ep as positive (Brief = "Intraparticle Voidage");

	alphab as positive (Brief = "3rd Term Bulk Mass Balance Constant");

	# ----- Bulk Transport Properties -----

	rhob as dens_mass (Brief = "Bulk Specific Gravity");
	rhop as dens_mass (Brief = "Particle Specific Gravity");
	rhoB as dens_mass (Brief = "Bed Specific Gravity");
	mub as Real (Brief = "Bulk Viscosity", Default = 1e-3, Unit = 'kg/m/s');
	mub_Air as Real (Brief = "Air Dynamic Viscosity", Default = 1e-3, Unit = 'kg/m/s');
	Mwb as molweight (Brief = "Bulk Molecular Weight");
	Mwb_Air as molweight (Brief = "Air Molecular Weight");
	#nub as Real (Brief = "Bulk Kinematic Viscosity",Unit = '(m^2)/s',Default = 2e-6);
	
	# ----- Thermodynamics Properties -----	

	Znormal as Real (Brief = "Normal Compressibility Factor");
	
	Zini as Real (Brief = "Initial Bulk Compressibility Factor");
	Zi0 as Real (Brief = "Inlet Bulk Compressibility Factor");
	
	# ----- Flow -----	

	#Fnormal as positive (Brief = "Normal Inlet Gas Flow", Unit = 'm^3/d'); # Normal Gas Conditions at 0 degree Celsius and 1 atm

	# ----- Velocity -----
	
	Vb as velocity (Brief = "Bulk Velocity");
	Vsup as velocity (Brief = "Superficial Bulk Velocity");
	
	# ----- Molecular Diffusivity -----

	Dkj(NComp,NComp) as Real (Brief = "Binary Molecular Difusivity", Unit = 'm^2/s');
	Dm(NComp) as Real (Brief = "Molecular Difusivity", Unit = 'm^2/s');

	# ----- Material Balance Adimensional Numbers -----

	Reb as Real (Brief = "Bulk Relnolds Number");
	Scb(NComp) as Real (Brief = "Bulk Schmidt Number");
	Dax(NComp) as Real (Brief = "Axial Difusivity", Unit = 'm^2/s');
	Pem(NComp) as positive (Brief = "Mass Balance Peclet Number");
	Shb(NComp) as Real (Brief = "Bulk Sherwood Number");
	
	# ----- Mass Transfer Resistence -----

	kf(NComp) as Real (Brief = "External Film Mass Transfer Coefficient", Unit = 'm/s');
	Dp(NComp) as Real (Brief = "Macropore Effective Diffusivity", Unit = 'm^2/s');
	Dk(NComp) as Real (Brief = "Knudsen Diffusivity", Unit = 'm^2/s');
	Dc(NComp) as Real (Brief = "Crystalline Difusivity", Unit = '(m^2)/s');
	
	# ----- Partial Pressure at Initial Condition -----

	Cini(NComp) as Real (Brief = "Initial Bulk Concentration", Unit = 'kmol/m^3');
	Ybini(NComp) as Real (Brief = "Initial Adimensional Bulk Concentration");
	Ctini as Real (Brief = "Initial Total Bulk Concentration", Unit = 'kmol/m^3');
	pini(NComp) as Real (Brief = "Initial Parcial Pressure", Unit = 'kPa');
	
	# ----- Partial Pressure at Inlet Position -----

	Ci0(NComp) as Real (Brief = "Inlet Bulk Concentration", Unit = 'kmol/m^3');
	Ybi0(NComp) as Real (Brief = "Inlet Adimensional Bulk Concentration");
	Ct0 as Real (Brief = "Inlet Total Bulk Concentration", Unit = 'kmol/m^3');
	pi0(NComp) as Real (Brief = "Inlet Parcial Pressure", Unit = 'kPa');

	# ----- Isotherm -----

	qini(NComp) as Real (Brief = "Initial Solid Concentration", Unit = 'kmol/kg');
	qi0(NComp) as Real (Brief = "Inlet Solid Concentration", Unit = 'kmol/kg');

	exp_b00 as Real (Brief = "Gorbach Exponential Parameter exp_b00");
	exp_b01 as Real (Brief = "Gorbach Exponential Parameter exp_b01");
	exp_b02 as Real (Brief = "Gorbach Exponential Parameter exp_b02");
	exp_b03 as Real (Brief = "Gorbach Exponential Parameter exp_b03");
	exp_b04 as Real (Brief = "Gorbach Exponential Parameter exp_b04");

	IPG0 as Real (Brief = "Gorbach Isotherm Parameter IPG0", Unit = 'kmol/kg'); # Gorbach Parameter IPG0 [kmol(Species)/kg(Solid)]
	IPG1 as Real (Brief = "Gorbach Isotherm Parameter IPG1", Unit = '1/bar');   # Gorbach Parameter IPG1 [1/bar]
	IPG2 as Real (Brief = "Gorbach Isotherm Parameter IPG2", Unit = '1/bar^2'); # Gorbach Parameter IPG2 [1/bar^2]
	IPG3 as Real (Brief = "Gorbach Isotherm Parameter IPG3", Unit = '1/bar');   # Gorbach Parameter IPG3 [1/bar]
	IPG4 as Real (Brief = "Gorbach Isotherm Parameter IPG4", Unit = '1/bar^2'); # Gorbach Parameter IPG4 [1/bar^2]

	# ----- Adimensional Isotherm Variables -----

	uini(NComp) as Real (Brief = "Initial Adimensional Extended Dual Site Langmuir Isotherm");
	ui0(NComp) as Real (Brief = "Inlet Adimensional Extended Dual Site Langmuir Isotherm");

	Dmt(NComp) as positive (Brief = "Mass Transfer Parameter");
	Dg(NComp) as positive (Brief = "3rd Term Adimensional Bulk Mass Balance Parameter");
	
	# ----- Some Isotherm Parameters -----

	b(NComp,2) as Real (Brief = "Extended Dual Site Langmuir Isotherm Variable", Unit = '1/kPa');
	qs(NComp,2) as Real  (Brief = "Extended Dual Site Langmuir Isotherm Variable", Unit = 'mol/kg');

	# ----- Choosing the LDF Model -----

	kldf(NComp) as Real (Brief = "Global Mass Transfer Coefficient", Unit = '1/s');
	
	# ----- Time -----

	t as Real (Brief = "Time", Unit = 's');

	# ----- Adimensional Global Mass Transfer Coefficient: Kldf -----

	KLDF(NComp) as Real (Brief = "Adimensional Global Mass Transfer Coefficient");

	##### ----- MOMENTUM BALANCE ----- #####

	# ----- Momentum Balance Variables -----

	#Pb as pressure (Brief = "Bulk Pressure");

	# ----- Momentum Balance Adimensional Numbers -----

	Lambdab as Real (Brief = "Adimensional Bulk Ergun Equation Parameter");

	##### ----- ENERGY BALANCE ------- #####

	# ----- Initial Condition (tau=0): Energy Balance -----
	
	Tbini as temperature (Brief = "Initial Bulk Temperature");
	Tpini as temperature (Brief = "Initial Particle Temperature");

	THETAbini as Real (Brief = "Initial Adimensional Bulk Temperature");
	THETApini as Real (Brief = "Initial Adimensional Particle Temperature");
	
	# ----- Geometry -----
	
	ap as Real (Brief = "Specific Particle Surface per Bed Volume", Unit = '1/m');
	
	# ----- Bulk Energy Transport Properties -----

	Cpb_mol as cp_mol (Brief = "Bulk Molar Heat Capacity"); #,Unit = 'J/mol/K',Default =46.6);
	#Cpb_mol_ as cp_mol (Brief = "Bulk Molar Heat Capacity"); #,Unit = 'J/mol/K',Default =46.6);
	Cpb as cp_mass (Brief = "Bulk Heat Capacity"); #,Unit = 'J/mol/K',Default =46.6);
	Cpp as cp_mass (Brief = "Particle Heat Capacity"); #,Unit = 'J/mol/K',Default =46.6);
	Kb as Real (Brief = "Bulk Thermal Conductivity", Unit = 'W/m/K');

	Hads(NComp) as Real (Brief = "Isosteric Heat of Adsorption", Unit = 'kJ/mol');

	# ----- Energy Balance Adimensional Numbers -----

	Prb as Real (Brief = "Bulk Prandtl Number");
	Kax as Real (Brief = "Effective Axial Bulk Thermal Conductivity", Unit = 'W/m/K');
	Nub as Real (Brief = "Bulk Nusselt Number");
	hfb as Real (Brief = "Convective Heat Transfer Coefficient", Unit = 'W/m^2/K');
	#Kb__(NofS) as Real (Brief = "Bulk Thermal Conductivity", Unit = 'W/m/K');
	
	Phib as Real (Brief = "1st Term Adimensional Bulk Energy Balance Parameter");
	Psib as Real (Brief = "3rd Term Adimensional Bulk Energy Balance Parameter");
	Phis as Real (Brief = "1st Term Adimensional Solid Energy Balance Parameter");
	Psip as Real (Brief = "2rd Term Adimensional Particle Energy Balance Parameter");

	# ---------------------------------------------------------------------------------------------------------------------------------------------------------



	#########
	#########
	EQUATIONS
	#########
	#########
	
	########################################
	##### ----- MATERIAL BALANCE ----- #####
	########################################
	
	# ----- Geometry -----

	"Cross Section Area"
	Across = PInumber*(dB/2.0)^2.0;
	
	# ----- Porosity -----

	"Total Bed Voidage"
	ep = (epsilon - ei ) / ( 1.0 - ei );
	"3rd Term Bulk Mass Balance Parameter"
	alphab = (1-ei)/ei;
	
	# ----- Bulk Transport Properties -----
	
	#"Transport Properties"
	rhob = PP.VapourDensity(T0,P0,zi0); # Bulk Specific Gravity
	mub = PP.VapourViscosity(T0,P0,zi0); # Bulk Dynamic Viscosity
	mub_Air = PP.VapourViscosity(T0,P0,zini); # Bulk Dynamic Viscosity
	"Bulk Molecular Weight"
	Mwb = sum(M*zi0);
	"Air Molecular Weight"
	Mwb_Air = sum(M*zini);
	#"Kinematic Viscosity"
	#nu = mu/rho;
	#rhoB = (1-ei)*rhop;
	rhop = rhoB/(1.0-ei);
	
	# ----- Thermodynamics Properties -----	

	"Normal Compressibility Factor"
	Znormal = PP.VapourCompressibilityFactor(Tnormal,Pnormal,zi0(:)); # 0.5201;

	"Initial Bulk Compressibility Factor"
	Zini = PP.VapourCompressibilityFactor(T0,P0,zini); #0.8968;

	"Inlet Bulk Compressibility Factor"	
	Zi0 = PP.VapourCompressibilityFactor(T0,P0,zi0); # 0.5201;

	# ----- Flow -----
	
	#"Inlet Actual Flow"
	F0 = Fnormal*(T0/Tnormal)*(Pnormal/P0)*(Zi0/Znormal);
	m0 = F0*rhob;
	
	# ----- Velocity -----

	"Superficial Velocity"
	Vsup = m0/rhob/Across;
	"Velocity"
	#Vb = Vsup/ei;
	Vb = Vsup;

	# ----- Molecular Diffusivity -----
	
	for j in [1:NComp] do
		for k in [1:NComp] do
			
			"Binary Molecular Diffusivity Calculation"
			Dkj(k,j) = 1.0E-05*'m^2/s' * ((T0/'K')^1.75) * (sqrt(1.0/(M(k)/'g/mol')+1.0/(M(j)/'g/mol'))) / ( (0.986923*(P0/'kPa')) * ((Vatomic(k)/'m^3')^(1.0/3.0)+(Vatomic(j)/'m^3')^(1.0/3.0))^2.0 );
			
		end
	end

	#"Molecular Diffusivity Calculation"
	#Dm = [(1-zi0(1))/(zi0(2)/Dkj(1,2)+zi0(3)/Dkj(1,3)), (1-zi0(2))/(zi0(1)/Dkj(2,1)+zi0(3)/Dkj(2,3)), (1-zi0(3))/(zi0(1)/Dkj(3,1)+zi0(2)/Dkj(3,2))];

	for c in [1:NComp] do
		
		"Molecular Diffusivity Calculation"
		Dm(c) = (1.0-zi0(c))/(sum(zi0/Dkj(c,:)) - zi0(c)/Dkj(c,c));

	end


	# ----- Material Balance Adimensional Numbers -----
	
	"Reynolds Number"
	Reb = 2*Rp*rhob*Vsup/mub;

	for c in [1:NComp] do
		
		"Schmidt Number"
		Scb(c) = mub/(rhob*Dm(c));
		"Axial Diffusivity"
		Dax(c) = (Dm(c)/ei)*(20.0+0.5*Scb(c)*Reb);
		"Bulk Peclet Number"
		Pem(c) = Vb*L/Dax(c);
		"Bulk Sherwood Number"
		#Shb(c) = 2.0+1.1*Reb^(0.6)*(Scb(c))^(1/3);	
		Shb(c) = 2.0+1.1*(Reb*Reb)^(0.3)*(Scb(c)*Scb(c))^(1.0/6.0);
	end

	# ----- Mass Transfer Resistence -----
	
	for c in [1:NComp] do
		
		"External Film Mass Transfer Coefficient"
		kf(c) = (Dm(c)/(2.0*Rp))*Shb(c); 	
		"Knudsen Diffusivity"
		Dk(c) = 97.0*'m^2/s'*(rp/'m')*sqrt((T0/'K')/(M(c)/'kg/kmol'));
		"Macropore Effective Diffusivity"
		Dp(c) = 1.0/(tortuosity*((1.0/Dk(c))+(1.0/Dm(c)))); # Validado
		"Crystalline Diffusity"
		Dc(c) = D0(c)*exp(-Energy(c)/(R*T0));
		
	end

	# ----- Partial Pressure at Initial Condition -----

	for c in [1:NComp] do
		
		"Concentration at tau=0"
		Cini(c) = (zini(c)*P0)/(Zini*R*T0);
		"Initial Bulk Adimensional Concentration"
		Ybini(c) = Cini(c)/Ci0(c);
		
	end
	
	"Initial Bulk Total Concentration"
	Ctini = sum(Cini(:)); #Cini(1)+Cini(2)+Cini(3)+Cini(4);
	
	for c in [1:NComp] do
		
		"Initial Bulk Partial Pressure"
		pini(c) = Ci0(c)*Ybini(c)*P0/Ctini;
		
	end
	
	# ----- Partial Pressure at Inlet Position -----
	
	for c in [1:NComp] do
		
		"Inlet Bulk Concentration"
		Ci0(c) = (zi0(c)*P0)/(Zi0*R*T0);
		"Inlet Bulk Adimensional Concentration"
		Ybi0(c) = Ci0(c)/Ci0(c);
		
	end
	
	"Inlet Bulk Total Concentration"
	Ct0 = sum(Ci0(:));
	
	for c in [1:NComp] do
		
		"Inlet Bulk Partial Pressure"
		pi0(c) = Ci0(c)*Ybi0(c)*P0/Ct0;
		
	end
	
	# ----- Total Bulk Concentration Calculation -----
	
	for e in [1:OCFEM.ne] do
		for p in [1:OCFEM.np] do
			
			"Total Bulk Concentration"
			OCFEM.Cbt(p,e) = sum(Ci0*OCFEM.Yb(p,e,:));
			
		end
	end # Total Bulk Concentration Loop
	
	# ----- Bulk Concentration and Molar Fraction Calculation -----
	
	for c in [1:NComp] do
		for e in [1:OCFEM.ne] do
			for p in [1:OCFEM.np] do
				
				if OCFEM.Cbt(p,e) > 0.0*'kmol/m^3' then
					
					"Bulk Partial Pressure Calculation (if Cbt>0)"
					OCFEM.zbi(p,e,c) = OCFEM.Cb(p,e,c)/OCFEM.Cbt(p,e);
					
				else
					
					"Bulk Partial Pressure Calculation (if Cbt<=0)"
					OCFEM.zbi(p,e,c) = 0.0;
					
				end
				
			end
		end
	end
	
	for c in [1:NComp] do
		for e in [1:OCFEM.ne] do
			for p in [1:OCFEM.np] do
				
				"Bulk Concentration Profile Calculation"
				OCFEM.Cb(p,e,c) = Ci0(c) * OCFEM.Yb(p,e,c);
				"Bulk Molar Fraction Profile Calculation"
				OCFEM.zb(p,e,c) = OCFEM.Cb(p,e,c) * Zi0 * R * T0*OCFEM.THETAp(p,e) / P0*OCFEM.PIb(p,e); # Fracao molar 
				#OCFEM.zb(p,e,c) = OCFEM.Cb(p,e,c) * Zi0 * R * T0 / P0; # Fracao molar com T e P constantes
				
			end
		end
	end
	
	# ----- Adsorbed Concentration and Equilibrium Adsorbed Concentration Calculation -----
		
	for c in [1:NComp] do
		for e in [1:OCFEM.ne] do
			for p in [1:OCFEM.np] do
				
				"Particle Concentration Profile Calculation"
				OCFEM.qb(p,e,c) = (Ci0(c)/rhoB) * OCFEM.ub(p,e,c);
				"Equilibrium Adsorbed Phase Concentration Profile Calculation"
				OCFEM.qb_eq(p,e,c) = (Ci0(c)/rhoB) * OCFEM.ub_eq(p,e,c);
				
			end
		end
	end

	# ----- Partial Pressure Calculations -----

	for c in [1:NComp] do
		for e in [1:OCFEM.ne] do
			for p in [1:OCFEM.np] do
				
				if OCFEM.Cbt(p,e) > 0.0*'kmol/m^3' then
					
					"Bulk Partial Pressure Calculation (if Cbt>0)"
					OCFEM.pi(p,e,c) = Ci0(c)*OCFEM.Yb(p,e,c)*P0/OCFEM.Cbt(p,e);
					
				else
					
					"Bulk Partial Pressure Calculation (if Cbt<=0)"
					OCFEM.pi(p,e,c) = 0.0*'kPa';
					
				end
			end
		end
	end

	##### ----- Isotherm ---------------------------------------------------------------------------------------------------------------------------------------------------------------- #####
	###########################################################################################################################################################################################
	
	switch Isotherm

		case "Gorbach":
		
		"Initial Adimensional Extended Dual Site Langmuir Isotherm (Gholami2010b)"
		qini(1) = Aging*( IPG0 * ( IPG1*pini(1) + IPG2*pini(1)*pini(1) ) / ( 1 + IPG3*pini(1) + IPG4*pini(1)*pini(1) ) );
		qini(2) = 0*'kmol/kg';
		qini(3) = 0*'kmol/kg';

		qi0(1) = Aging*(IPG0 * ( IPG1*pi0(1) + IPG2*pi0(1)*pi0(1) ) / ( 1 + IPG3*pi0(1) + IPG4*pi0(1)*pi0(1) ) );
		qi0(2) = 0*'kmol/kg';
		qi0(3) = 0*'kmol/kg';		

		for e in [1:OCFEM.ne] do
			for p in [1:OCFEM.np] do
				
				"Extended Dual Site Langmuir Isotherm (Gholami2010b)"
				OCFEM.ub_eq(p,e,1) = Aging*( (rhoB/Ci0(1)) * IPG0 * ( IPG1*OCFEM.pi(p,e,1) + IPG2*OCFEM.pi(p,e,1)*OCFEM.pi(p,e,1) ) / ( 1 + IPG3*OCFEM.pi(p,e,1) + IPG4*OCFEM.pi(p,e,1)*OCFEM.pi(p,e,1) ) );
				OCFEM.ub_eq(p,e,2) =  0;
				OCFEM.ub_eq(p,e,3) =  0;
				
			end
		end # Gorbach Loop
		
		case "ExtDualSiteLang":
		
		for c in [1:NComp] do
			
			"Initial Adimensional Extended Dual Site Langmuir Isotherm (Gholami2010b)"
			qini(c) = Aging*( qs(c,1)*((b(c,1)*pini(c))/(1.0+sum(b(:,1)*pini(:))))+qs(c,2)*((b(c,2)*pini(c))/(1.0+sum(b(:,2)*pini(:)))) );
			qi0(c) = Aging*( qs(c,1)*((b(c,1)*pi0(c))/(1.0+sum(b(:,1)*pi0(:))))+qs(c,2)*((b(c,2)*pi0(c))/(1.0+sum(b(:,2)*pi0(:)))) );
			
		end
		
		for c in [1:NComp] do
			for e in [1:OCFEM.ne] do
				for p in [1:OCFEM.np] do
					
					"Extended Dual Site Langmuir Isotherm (Gholami2010b)"
					OCFEM.ub_eq(p,e,c) = Aging*( (rhoB/Ci0(c))*( qs(c,1)*(b(c,1)*OCFEM.pi(p,e,c))/(1.0+sum(b(:,1)*OCFEM.pi(p,e,:))) 
													   + qs(c,2)*(b(c,2)*OCFEM.pi(p,e,c))/(1.0+sum(b(:,2)*OCFEM.pi(p,e,:))) ) );
					
				end
			end
		end # Lang3 Loop
		
		
		case "DualSiteLang": # Cavalcante2023
		
		for c in [1:NComp] do
			
			"Initial Adimensional Extended Dual Site Langmuir Isotherm"
			qini(c) = Aging*( IPC1(c)*(exp(IPC2(c)/T0)*pini(c))/(1.0+sum(IPC3(:)*exp(IPC4(:)/T0)*pini(:))) + IPC5(c)*(exp(IPC6(c)/T0)*pini(c))/(1.0+sum(IPC7(:)*exp(IPC8(:)/T0)*pini(:))) );
			#qini(c) = IPC1(c)*(exp(IPC2(c)/T0(CASE))*pini(c))/(1+IPC3(c)*exp(IPC4(c)/T0(CASE))*pini(c)) + IPC5(c)*(exp(IPC6(c)/T0(CASE))*pini(c))/(1+IPC7(c)*exp(IPC8(c)/T0(CASE))*pini(c));
			qi0(c)  = Aging*( IPC1(c)*(exp(IPC2(c)/T0)* pi0(c) )/(1.0+   IPC3(c)*exp(IPC4(c)/T0)* pi0(c))  + IPC5(c)*(exp(IPC6(c)/T0)* pi0(c))/(1.0+    IPC7(c)*exp(IPC8(c)/T0)* pi0(c) ) );
			
		end
		
		for c in [1:NComp] do
			for e in [1:OCFEM.ne] do
				for p in [1:OCFEM.np] do
					
					"Extended Dual Site Langmuir Isotherm (Cavalcante2023)"
					OCFEM.ub_eq(p,e,c) = Aging*( (rhoB/Ci0(c)) * ( IPC1(c)*exp(IPC2(c)/(T0*OCFEM.THETAp(p,e)))*OCFEM.pi(p,e,c)/(1.0+sum(IPC3(:)*exp(IPC4(:)/(T0*OCFEM.THETAp(p,e)))*OCFEM.pi(p,e,:))) 
					                                     + IPC5(c)*exp(IPC6(c)/(T0*OCFEM.THETAp(p,e)))*OCFEM.pi(p,e,c)/(1.0+sum(IPC7(:)*exp(IPC8(:)/(T0*OCFEM.THETAp(p,e)))*OCFEM.pi(p,e,:))) ) );
					
				end
			end
		end # Lang3 Loop
		
		
		case "Lang3": # Vasconcelos2020
		
		for c in [1:NComp] do
			
			"Initial Adimensional Extended Dual Site Langmuir Isotherm"
			qini(c) = Aging*( (IPV1(c)-IPV2(c)*T0)*( (IPV3(c)*exp(IPV4(c)/T0)*pini(c))/(1.0+IPV3(c)*exp(IPV4(c)/T0)*pini(c)) ) );
			qi0(c)  = Aging*( (IPV1(c)-IPV2(c)*T0)*( (IPV3(c)*exp(IPV4(c)/T0)*pi0(c) )/(1.0+IPV3(c)*exp(IPV4(c)/T0)*pi0(c) ) ) );
			
		end
		
		for c in [1:NComp] do
			for e in [1:OCFEM.ne] do
				for p in [1:OCFEM.np] do
					
					"Langmuir 3 Isotherm (Vasconcelos2020)"
					OCFEM.ub_eq(p,e,c) = Aging*( (rhoB/Ci0(c)) * (IPV1(c)-IPV2(c)*T0)*( (IPV3(c)*exp(IPV4(c)/T0)*OCFEM.pi(p,e,c))/(1.0+IPV3(c)*exp(IPV4(c)/T0)*OCFEM.pi(p,e,c)) ) );
					
				end
			end
		end # ExtDualSiteLang Loop
		
	end # Switch Isotherm
	
	###########################################################################################################################################################################################

	# ----- Adimensional Isotherm Variables -----

	for c in [1:NComp] do
		
		uini(c) = (rhoB/Ci0(c)) * qini(c);
		ui0(c)  = (rhoB/Ci0(c)) * qi0(c);
		
		Dmt(c)  = (rhop/Ci0(c))*qi0(c);
		Dg(c)  = (rhoB/Ci0(c))*qi0(c);
		
	end

	# ----- Gholami (2010b) Isotherm Parameters -----

	for c in [1:NComp] do
		
		"Extended Dual Site Langmuir Isotherm Variables"
		b(c,1) = b0(c,1)*exp(E(c,1)/(R*T0));
		b(c,2) = b0(c,2)*exp(E(c,2)/(R*T0));	
		qs(c,1) = A1(c,1)/T0 + A2(c,1);
		qs(c,2) = A1(c,2)/T0 + A2(c,2);
	
	end

	# ----- Gorbach (2004) Isotherm Parameters -----

	exp_b00 = exp( b0T * ( 1 - ( T0 / Tref ) ) );
	exp_b01 = exp( ( b1T * ( Tref / T0 ) ) - 1 );
	exp_b02 = exp( ( b2T * ( Tref / T0 ) ) - 1 );
	exp_b03 = exp( ( b3T * ( Tref / T0 ) ) - 1 );
	exp_b04 = exp( ( b4T * ( Tref / T0 ) ) - 1 );

	IPG0 = b00 * exp_b00;  # Gorbach Parameter IPG0 [kmol(Species)/kg(Solid)]
	IPG1 = b10 * exp_b01;  # Gorbach Parameter IPG1 [1/bar]
	IPG2 = b20 * exp_b02;  # Gorbach Parameter IPG2 [1/bar?]
	IPG3 = b30 * exp_b03;  # Gorbach Parameter IPG3 [1/bar]
	IPG4 = b40 * exp_b04;  # Gorbach Parameter IPG4 [1/bar?]

	
	##### ----- Bulk Material Balance ----------------------------------------------------------------------------------------------- #####
	#######################################################################################################################################
	
	for c in [1:NComp] do
		for e in [1:OCFEM.ne] do
			for p in [2:OCFEM.np-1] do
				
				"Adimensional Bulk Mass Balance"
				#diff(OCFEM.Yb(p,e,c))*'s' =  (1/Pem(c))*OCFEM.dif2xYb(p,e,c) - OCFEM.dif1xYb(p,e,c) - alphab*diff(OCFEM.ub(p,e,c))*'s';
				##diff(OCFEM.Yb(p,e,c)) =  (1.0/Pem(c))*OCFEM.dif2xYb(p,e,c)*(1.0/t) - OCFEM.dif1xYb(p,e,c)*(1.0/t) - alphab*diff(OCFEM.ub(p,e,c));
				epsilon*diff(OCFEM.Yb(p,e,c)) =  ei*(1.0/Pem(c))*OCFEM.dif2xYb(p,e,c)*(1.0/t) - OCFEM.dif1xYb(p,e,c)*(1.0/t) - diff(OCFEM.ub(p,e,c));
				
			end
		end
	end
	
	#######################################################################################################################################

	# ----- Mass Balance Boundary Conditions -----
	
	for c in [1:NComp] do  

		"Boundary Condition at x=0 (Adimensional Bulk Mass Balance)"
		#OCFEM.Yb(1,1,c) = 1.0; # (Z=0)
		ei*(1.0/Pem(c))*OCFEM.dif1xYb(1,1,c) = OCFEM.Yb(1,1,c) - 1.0; #(1/PeM)*ddYb/dx = Yb(x=0+)-1 
		#(1.0/Pem(c))*OCFEM.dif1xYb(1,1,c) = OCFEM.Yb(1,1,c) - 1.0; #(1/PeM)*ddYb/dx = Yb(x=0+)-1 
		"Boundary Condition at x=1 (Adimensional Bulk Mass Balance)"
		OCFEM.dif1xYb(OCFEM.np,OCFEM.ne,c) = 0.0; # (Z=L)
		
	end

	# ----- Choosing the LDF Model -----

	switch LDF_Model
		
		case "Fitting_kldf":
			
			"Fitting Global Mass Transfer Coefficient" 
			kldf = defined_kldf;
		
		case "LDF_Micro":
			
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
							
					"Global Mass Transfer Coefficient" 
					kldf(c) = 15.0*Dc(c)/(Rc^2.0); # Gholami2010b
					
				end
				
			end
			
		case "LDF_Macro":
			
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
					
					"Global Mass Transfer Coefficient" 
					kldf(c) = 1.0/(Dmt(c)*(Rp^2.0/(15.0*ep*Dp(c))));
					
				end
				
			end
			
		case "LDF_ExtFilm":
			
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
					
					"Global Mass Transfer Coefficient" 
					kldf(c) = 1.0/(Dmt(c)*(Rp/(3.0*kf(c))));
					
				end
				
			end
			
		case "LDF_Micro_Macro":
			
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
					
					"Global Mass Transfer Coefficient" 
					kldf(c) = 15.0*Dc(c)/(Rc^2) + 1.0/(Dmt(c)*(Rp^2.0/(15.0*ep*Dp(c))));
					
				end
				
			end
			
		case "LDF_Micro_ExtFilm":
			
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
					
					"Global Mass Transfer Coefficient" 
					kldf(c) = 15.0*Dc(c)/(Rc^2) + 1.0/(Dmt(c)*(Rp/(3.0*kf(c))));
					
				end
				
			end
			
		case "LDF_Macro_ExtFilm":
			
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
					
					"Global Mass Transfer Coefficient" 
					kldf(c) = 1.0/(Dmt(c)*(Rp^2.0/(15.0*ep*Dp(c)) + Rp/(3.0*kf(c)))); # Cavalcante2023
					
				end
				
			end
			
		case "LDF_Micro_Macro_ExtFilm":
				
			for c in [1:NComp] do
				
				if Dmt(c) < 0.0000000000001 then
					
					kldf(c) = 0.0*'1/s';
					
				else	
					
					"Global Mass Transfer Coefficient" 
					kldf(c) = 15.0*Dc(c)/(Rc^2.0) + 1.0/(Dmt(c)*(Rp^2.0/(15.0*ep*Dp(c)) + Rp/(3.0*kf(c)))); # Braun2018
					
				end
				
			end
		
	end # Switch LDF_Model

	# ----- Time -----

	t = (L/Vb);

	# ----- Adimensional Global Mass Transfer Coefficient: Kldf -----

	for c in [1:NComp] do	
		
		"Adimensional Global Mass Transfer Coefficient" 
		KLDF(c) = kldf(c)*t;
		
	end
	
	
	##### ----- Solid Material Balance ------------------------------------------------ #####
	#########################################################################################

	for c in [1:NComp] do
		for e in [1:OCFEM.ne] do
			for p in [1:OCFEM.np] do
				
				"Linear Driving Force (LDF)"
				#diff(OCFEM.ub(p,e,c))*'s' = KLDF(c) * (OCFEM.ub_eq(p,e,c)-OCFEM.ub(p,e,c));
				diff(OCFEM.ub(p,e,c)) = KLDF(c)*(1.0/t) * (OCFEM.ub_eq(p,e,c)-OCFEM.ub(p,e,c));
				#diff(OCFEM.ub(p,e,c)) = Theta * (T0/'K')^0.75 * zi0(c)  * ( 1.0 - ( OCFEM.ub(p,e,c)+Zero )/( OCFEM.ub_eq(p,e,c)+Zero ));
				#diff(OCFEM.ub(p,e,c)) = Theta * (OCFEM.Tb(p,e,c)/'K')^0.75 * OCFEM.zb(p,e,c)  * ( 1.0 - ( OCFEM.ub(p,e,c)+Zero )/( OCFEM.ub_eq(p,e,c)+Zero ));
				
			end
		end
	end  # LDF Loop
	
	#########################################################################################
	

	#----- Dimensionalizing some Material Dependent Variables

	"Bulk Molar Fraction Profile Calculation"
	OCFEM.zi = OCFEM.Cb * Zi0 * R * T0 / P0; # * 1E+02; Fracao molar em %
	
	
	########################################
	##### ----- MOMENTUM BALANCE ----- #####
	
	# ----- Momentum Balance Variables -----
	
	#Pb = P0;

	# ----- Momentum Balance Adimensional Numbers -----

	"Adimensional Parameter of Bulk Ergun Equation"
	Lambdab = (2.0*Rp)*P0/rhob/(Vsup^2.0)/L;


	##### ----- Momentum Balance Ordinary Equation -----
	####################################################

	for e in [1:OCFEM.ne] do
		for p in [2:OCFEM.np] do # for p in [1:OCFEM.np-1] do
			
			"Adimensional Bulk Momentum Balance"
			Lambdab*OCFEM.dif1xPIb(p,e) = -150.0*((1.0-ei)^2.0)/(ei^3.0)/Reb - 1.75*(1.0-ei)/ei^3.0;
			
		end
	end
	
	####################################################

	# ----- Momentum Boundary Conditions
	
	#"Boundary Condition at x=0 (Adimensional Bulk Momentum Balance)"
	# OCFEM.PIb(1,1) = 1.0; # (Z=0)
	"Boundary Condition at x=1 (Adimensional Bulk Momentum Balance)"
	OCFEM.PIb(OCFEM.np,OCFEM.ne) = 1.0; 

	# ----- Dimensionalizing some Momentum Dependent Variables

	#"Bulk Pressure Profile Calculation"
	#OCFEM.Pb = (P0 * OCFEM.PIb); # Esta na verdade em Celsius
	
	# ----- Pressure Profile Calculation -----
	
	for e in [1:OCFEM.ne] do
		for p in [1:OCFEM.np] do
			
			"Bulk Pressure Profile Calculation"
			OCFEM.Pb(p,e) = P0 * OCFEM.PIb(p,e);
			
		end
	end

	
	######################################
	##### ----- ENERGY BALANCE ----- #####
	######################################

	# ----- Initial Condition (tau=0): Energy Balance -----
	
	Tpini = Tbini;
	THETAbini = Tbini/T0;
	THETApini = Tpini/T0;
	
	# ----- Geometry -----

	"Specific Particle Surface per Bed Volume"	
	ap = 3.0/Rp; #1807.23*'1/m'; # VASCONCELOS2020 # RUTHVEN1984 (pg. 217)
	
	# ----- Bulk Energy Transport Properties -----
	
	#"Bulk Thermal Conductivity"
	Kb = PP.VapourThermalConductivity(T0,P0,zi0);
	#"Bulk Molar Specific Heat"
	Cpb_mol = PP.VapourCp(T0,P0,zi0);
	"Bulk Mass Specific Heat"
	Cpb = Cpb_mol/Mwb;

	# ----- Energy Balance Adimensional Numbers -----

	"Prandtl Number"
	Prb = mub*Cpb/Kb;
	"Effective Axial Bulk Thermal Conductivity"
	Kax = Kb*(7.0+0.5*Prb*Reb); # Proximo: 73,22648 W/(m.K) contra 5,53*10^-5MW/(m.K) de Cavalcante2023
	"Bulk Nusselt Number"
	Nub = 2.0+1.1*(Reb*Reb)^(0.3)*(Prb*Prb)^(1.0/6.0);
	#Nub = 2+1.1*Reb^(0.6)*Prb^(1/3); # Validado
	"Convective Heat Transfer Coefficient"
	hfb = (Kb/(2*Rp))*Nub; # Validado
	
	"1st Term Adimensional Parameter of Bulk Energy Balance"
	Phib = Kax/Vb/L/rhob/Cpb;
	"3rd Term Adimensional Parameter of Bulk Energy Balance"
	Psib = hfb*ap*L/rhob/Cpb/Vb;
	"1rd Term Adimensional Parameter of Particle Energy Balance"
	Phis = hfb*ap*L/rhop/Cpp/Vb;
	"3rd Term Adimensional Parameter of Bulk Energy Balance"
	Psip = 1.0/T0/rhop/Cpp*sum(Ci0(:)*Hads(:));
	
	
	##### ----- Bulk Energy Balance Partial Equation ----------------------------------------------------------------------------------------------- #####	
	######################################################################################################################################################
	
	for e in [1:OCFEM.ne] do
		for p in [2:OCFEM.np-1] do
			
			"Adimensional Bulk Energy Balance"
			epsilon*diff(OCFEM.THETAb(p,e)) = ei*Phib*OCFEM.dif2xTHETAb(p,e)*(1/t) - OCFEM.dif1xTHETAb(p,e)*(1/t) - Psib*(OCFEM.THETAb(p,e)-OCFEM.THETAp(p,e))*(1/t);
			#diff(OCFEM.THETAb(p,e))*'s' = Phib*OCFEM.dif2xTHETAb(p,e) - OCFEM.dif1xTHETAb(p,e) - Psib*(OCFEM.THETAb(p,e)-OCFEM.THETAp(p,e));
			
		end
	end
	
	######################################################################################################################################################
	
	
	# ----- Solid Energy Balance Partial Equation -------------------------------------------------------------------- #####	
	########################################################################################################################

	for e in [1:OCFEM.ne] do
		for p in [1:OCFEM.np] do # Como THETAp nao depende de x (ou Z), nao precisa de continuidade entre cada elemento e 
			# vai de 1 a np
			
			"Adimensional Solid Energy Balance"
			diff(OCFEM.THETAp(p,e)) = Phis*(OCFEM.THETAb(p,e)-OCFEM.THETAp(p,e))*(1.0/t) - Psip*sum(diff(OCFEM.ub(p,e,:)));
			#diff(OCFEM.THETAp(p,e))*'s' = Phis*(OCFEM.THETAb(p,e)-OCFEM.THETAp(p,e)) - Psip*sum(diff(OCFEM.ub(p,e,:))*'s');
			# Antes do Psip ficou "positivo" porque considerei o deltaHads como "positivo".
		end
	end
	
	########################################################################################################################

	# ----- Energy Balance Boundary Conditions -----	

	"Boundary Condition at x=0 (Adimensional Bulk Energy Balance)"
	ei*Phib*OCFEM.dif1xTHETAb(1,1) = OCFEM.THETAb(1,1) - 1.0; #Phib*THETAb/dx = THETAb(x=0+)-1 
	"Boundary Condition at x=1 (Adimensional Bulk Energy Balance)"
	OCFEM.dif1xTHETAb(OCFEM.np,OCFEM.ne) = 0.0; # (Z=L)

	# ----- Dimensionalizing some Energy Dependent Variables

	#"Bulk Temperature Profile Calculation"
	#OCFEM.Tb = (T0 * OCFEM.THETAb)-273.15*'K'; # Esta na verdade em Celsius
	#"Particle Temperature Profile Calculation"
	#OCFEM.Tp = (T0 * OCFEM.THETAp)-273.15*'K'; # Esta na verdade em Celsius
	
	
	# ----- Temperature Profile Calculation -----
	
	for e in [1:OCFEM.ne] do
		for p in [1:OCFEM.np] do
			
			"Bulk Temperature Profile Calculation"
			OCFEM.Tb(p,e) = T0 * OCFEM.THETAb(p,e);
			OCFEM.Tb_C(p,e) = OCFEM.Tb(p,e) - 273.15*'K';
			"Particle Temperature Profile Calculation"
			OCFEM.Tp(p,e) = T0 * OCFEM.THETAp(p,e);
			OCFEM.Tp_C(p,e) = OCFEM.Tp(p,e) - 273.15*'K';
			
		end
	end
	
	
	##### ----- Comments :) ----- #####
	
		#for e in [1:OCFEM.ne] do
	#	for p in [1:OCFEM.np] do
	#		"Bulk Temperature Distribution"
	#		OCFEM.Tb(p,e) = T0;
	#		"Bulk Pressure Distribution"
	#		OCFEM.Pb(p,e) = P0;
	#		"Dynamic Viscosity"
	#		OCFEM.mu(p,e) = PP.VapourViscosity(OCFEM.Tb(p,e),OCFEM.Pb(p,e),zi0);
	#		"Specific Mass"
	#		OCFEM.rho(p,e) = PP.VapourDensity(OCFEM.Tb(p,e),OCFEM.Pb(p,e),zi0);
	#		"Kinematic Viscosity"
	#		OCFEM.nu(p,e) = OCFEM.mu(p,e)/OCFEM.rho(p,e);
	#		"Reynolds Number of Adimensional Ergun Equation"
	#		OCFEM.Reb(p,e) = OCFEM.rho(p,e)*Vsup*(2*Rp)/OCFEM.mu(p,e);
	#		"Adimensional Parameter of Ergun Equation"
	#		OCFEM.Phi(p,e) = (2*Rp)*P0/OCFEM.rho(p,e)/(Vsup^2)/L;
	#		OCFEM.Cpb(p,e) = PP.VapourCp(OCFEM.Tb(p,e),OCFEM.Pb(p,e),zi0);
	#	end
	#end
	
	# Extended Dual Site Langmuir Isotherm (Gholami2010b)
	#b0(:,1) = [3.58e-07,3.32e-07,6.77e-06,3.73e-05]*'1/kPa'; # Gholami2010b
	#b0(:,2) =  [1.62e-05,6.43e-07,6.13e-07,3.18e-05]*'1/kPa'; # Gholami2010b
	#E(:,1) = [44140.040,41077.100,13672.210,7528.091]*'J/mol'; # Gholami2010b
	#E(:,2) = [45199.990,29812.290,20307.220,7941.248]*'J/mol'; # Gholami2010b
	#A1(:,1) = [-3799.94,516.743,348.971,605.423]*'(mol*K)/kg'; #A11: primeiro parametro do primeiro sitio # Gholami2010b
	#A1(:,2) = [3684.491,-932.131,348.971,605.423]*'(mol*K)/kg';	#A21: segundo parametro do primeiro sitio # Gholami2010b
	#A2(:,1) = [18.711,-0.794,0.542,-0.582]*'mol/kg'; #A12 # Gholami2010b
	#A2(:,2) = [-4.45,6.083,0.542,-0.582]*'mol/kg'; #A22 # Gholami2010b
	#Energy = [17288.47,26334.00,12551.94,6275.97]*'J/mol'; # Gholami2010b
	#D0 = [2.39e-08,5.90e-11,7.20e-12,5.20e-13]*'(m^2)/s'; # Gholami2010b
	
	# SPECIFY 

	#m0__ = [217814.26603747,215872.73215313,108188.146624921,130023.18966289,221287.602023233,215937.593247528,131489.97580525,120131.417943487]*'kg/h'; # Cavalcante2023
	#T0 = (([28.2432124374376,29.0155829205552,30.3994049636385,31.7239554635451,30.8418186790638,29.5742227003704,30.8114404557796,30.3724379772622])+273.15)*'K'; # Cavalcante2023
	#zi0(1,:) = [0.000856031393293935,0.000881283919812149,0.000962685662047411,0.00102448221342443,0.000982319200705178,0.000906229700542088,0.000971851809445596,0.000961020400027118]; # Z=0 # Cavalcante2023
	#zi0(2,:) = [0.199828793721341,0.199823743216038,0.199807462867591,0.199795100208183,0.199803536159859,0.199818754059892,0.199805629638111,0.199807795919995]; # Z=0 # Cavalcante2023
	#zi0(3,:) = [0.799315174885365,0.79929497286415,0.799229851470362,0.799180417578393,0.799214144639436,0.799275016239566,0.799222518552444,0.799231183679978]; # Z=0 # Cavalcante2023
	#P0 = [7154,7341,7122,7211,7165,7361,7296,7124]*'kPa'; # 6400.0*'kPa'; # 6400.0
	#Mwb = [21.633160396967518,21.633068953535,21.6327741848229,21.6325503159742,21.6327030886431,21.632978620878,21.6327409927389,21.6327802150027]*'kg/kmol'; # Cavalcante2023 
	#Kb = [0.0368428903477514,0.0371452576926115,0.0369915462854992,0.0372175393381296,0.037083291595118,0.0372171494822816,0.0372424367331936,0.0369913612417863]*'W/m/K'; # Cavalcante2023
	#Cpb_mol = [47.4416081509794,47.710775271416,47.1576618548444,47.1887455064795,47.1924316029752,47.6873565169274,47.4344694014469,47.1643157982489]*'kJ/kmol/K'; # Cavalcante2023
	#Zi0 = [0.838059442299991,0.836209942860723,0.842956716896333,0.843931537003475,0.843040678377152,0.836975601843426,0.840639077435489,0.842861679103752]; # Cavalcante2023
	#mub = [0.0000142295157278945,0.0000143299987833316,0.0000142641962079605,0.0000143326960756668,0.0000142928193192616,0.0000143508421326451,0.0000143492197560868,0.0000142643757979535]*'kg/m/s'; # Cavalcante2023

	# INITIAL

	#SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,1) = SIEVE.Ybi0(1);
	#SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,2) = SIEVE.Ybi0(2);
	#SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,3) = SIEVE.Ybi0(3);
	#SIEVE.OCFEM.Yb(2:SIEVE.OCFEM.np-1,1:SIEVE.OCFEM.ne,4) = 0.5802;
	
	###SIEVE.OCFEM.ub(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne,1) = 1E-06;
	###SIEVE.OCFEM.ub(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne,2) = SIEVE.uini(2);
	###SIEVE.OCFEM.ub(1:SIEVE.OCFEM.np,1:SIEVE.OCFEM.ne,3) = SIEVE.uini(3);
	
	# SIEVE.OCFEM.ub = SIEVE.uini;

end